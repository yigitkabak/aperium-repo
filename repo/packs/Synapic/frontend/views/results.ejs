<!DOCTYPE html>
<html lang="en">
 <head>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css" integrity="sha512-Evv84Mr4kqVGRNSgIGL/F/aIDqQb7xQ2vcrdIwxfjThSH8CSR7PBEakCr51Ck+w+/U6swU2Im1vVX0SVk9ABhg==" crossorigin="anonymous" referrerpolicy="no-referrer" />
  <meta charset="utf-8"/>
  <meta content="width=device-width, initial-scale=1" name="viewport"/>
  <title>
    <%= query %> - Synapic Search
  </title>
  <script src="https://cdn.tailwindcss.com">
  </script>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" rel="stylesheet"/>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;700&amp;display=swap" rel="stylesheet"/>
  <style>
    body {
      font-family: 'Inter', sans-serif;
    }
    .result-link:hover {
        text-decoration: underline;
    }
    .overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.7);
      z-index: 1000;
      display: flex;
      opacity: 0;
      visibility: hidden;
      transition: opacity 0.3s ease-in-out, visibility 0.3s ease-in-out;
    }
    .overlay.is-active {
      opacity: 1;
      visibility: visible;
    }

    .slide-from-right-overlay .overlay-content {
        position: absolute;
        top: 0;
        right: 0;
        height: 100%;
        width: 320px;
        background-color: #1c1c1e;
        box-shadow: -5px 0 15px rgba(0, 0, 0, 0.5);
        transform: translateX(100%);
        transition: transform 0.3s ease-in-out;
        display: flex;
        flex-direction: column;
        padding: 1rem;
        color: white;
        text-align: left;
        overflow-y: auto;
    }

    .slide-from-right-overlay.is-active .overlay-content {
        transform: translateX(0);
    }

    .slide-from-right-overlay .overlay-close {
        position: absolute;
        top: 1rem;
        right: 1.5rem;
        color: #8E8E93;
        cursor: pointer;
        z-index: 1001;
        background: none;
        border: none;
        padding: 0;
    }
    .slide-from-right-overlay .overlay-close i {
        font-size: 2rem;
    }

    #gridViewOverlay {
        background-color: rgba(0, 0, 0, 0.7);
        justify-content: center;
        align-items: center;
    }

    #gridViewOverlay .modal-content {
        background-color: #2C2C2E;
        padding: 2.5rem;
        border-radius: 1rem;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.5);
        width: 90%;
        max-width: 400px;
        position: relative;
        transform: translateY(-20px);
        transition: transform 0.3s ease-out, opacity 0.3s ease-out;
        opacity: 0;
    }

    #gridViewOverlay.is-active .modal-content {
        transform: translateY(0);
        opacity: 1;
    }

    #gridViewOverlay .overlay-close {
        position: absolute;
        top: 1rem;
        right: 1rem;
        color: #8E8E93;
        cursor: pointer;
        background: none;
        border: none;
        padding: 0;
    }
    #gridViewOverlay .overlay-close i {
        font-size: 30px;
    }

    .menu-item {
        padding: 0.75rem 0.5rem;
        margin-bottom: 0.5rem;
        border-radius: 0.5rem;
        display: flex;
        align-items: center;
        color: #E0E0E0;
        transition: background-color 0.2s ease-in-out;
    }
    .menu-item:hover {
        background-color: #3A3A3C;
    }
    .menu-item i {
        margin-right: 0.75rem;
        font-size: 1.25rem;
        color: #8E8E93;
    }
    .menu-section-title {
        color: #8E8E93;
        font-size: 0.875rem;
        font-weight: bold;
        margin-top: 1.5rem;
        margin-bottom: 0.75rem;
        padding-left: 0.5rem;
        text-transform: uppercase;
    }
    .toggle-switch {
        position: relative;
        display: inline-block;
        width: 40px;
        height: 24px;
    }
    .toggle-switch input {
        opacity: 0;
        width: 0;
        height: 0;
    }
    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #3A3A3C;
        -webkit-transition: .4s;
        transition: .4s;
        border-radius: 24px;
    }
    .slider:before {
        position: absolute;
        content: "";
        height: 16px;
        width: 16px;
        left: 4px;
        bottom: 4px;
        background-color: white;
        -webkit-transition: .4s;
        transition: .4s;
        border-radius: 50%;
    }
    input:checked + .slider {
        background-color: #2196F3;
    }
    input:focus + .slider {
        box-shadow: 0 0 1px #2196F3;
    }
    input:checked + .slider:before {
        -webkit-transform: translateX(16px);
        -ms-transform: translateX(16px);
        transform: translateX(16px);
    }
    .theme-option {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 0.5rem 1rem;
        border-radius: 0.5rem;
        background-color: #3A3A3C;
        color: #E0E0E0;
        cursor: pointer;
        transition: background-color 0.2s;
    }
    .theme-option.selected {
        background-color: #5A5A5F;
        font-weight: bold;
    }
    .search-history-item {
        display: flex;
        align-items: center;
        padding: 0.5rem 1rem;
        cursor: pointer;
        border-radius: 0.5rem;
        transition: background-color 0.2s;
    }
    .search-history-item:hover {
        background-color: #3A3A3C;
    }
    .search-history-item i {
        margin-right: 0.75rem;
        color: #8E8E93;
    }
    .search-bar-container {
        position: relative;
        width: 100%;
        max-width: 700px;
        margin-bottom: 2rem;
    }
    .search-input-wrapper {
        display: flex;
        align-items: center;
        background-color: #2C2C2E;
        border-radius: 9999px;
        padding: 0.5rem 1rem;
        border: 1px solid #3A3A3C;
        height: 48px;
    }
    .search-input-wrapper:focus-within {
        outline: 1px solid #5A5A5F;
    }
    .search-input {
        flex-grow: 1;
        background-color: transparent;
        color: #E0E0E0;
        font-size: 1.125rem;
        line-height: 1.75rem;
        border: none;
        outline: none;
        padding: 0;
        margin: 0;
        min-width: 0; /* Ensures input can shrink */
    }
    .search-input::placeholder {
        color: #8E8E93;
    }
    .clear-search-button {
        color: #8E8E93;
        font-size: 1.25rem;
        margin-left: 0.5rem;
        cursor: pointer;
        background: none;
        border: none;
        padding: 0;
        display: flex;
        align-items: center;
        flex-shrink: 0; /* Prevents button from shrinking */
    }
    .search-separator {
        width: 1px;
        height: 24px;
        background-color: #5A5A5F;
        margin-left: 0.75rem;
        margin-right: 0.75rem;
        flex-shrink: 0; /* Prevents separator from shrinking */
    }
    .search-submit-button {
        color: #8E8E93;
        font-size: 1.25rem;
        cursor: pointer;
        background: none;
        border: none;
        padding: 0;
        display: flex;
        align-items: center;
        flex-shrink: 0; /* Prevents button from shrinking */
    }
    .search-options-bar {
        position: relative;
        display: flex;
        width: 100%;
        max-width: 700px;
        justify-content: flex-start;
        align-items: center;
        margin-bottom: 1.5rem;
        padding-left: 0;
        margin-top: 0;
        overflow-x: auto; /* Allow horizontal scrolling on small screens */
        -webkit-overflow-scrolling: touch; /* Smooth scrolling for iOS */
        scrollbar-width: none; /* Hide scrollbar for Firefox */
        -ms-overflow-style: none; /* Hide scrollbar for IE/Edge */
    }
    .search-options-bar::-webkit-scrollbar {
        display: none; /* Hide scrollbar for Chrome, Safari, Opera */
    }
    .search-option-item {
        color: #8E8E93;
        padding: 0.5rem 0.75rem;
        font-size: 0.875rem;
        cursor: pointer;
        border-radius: 9999px;
        transition: color 0.2s ease-in-out;
        position: relative;
        text-decoration: none;
        white-space: nowrap; /* Prevent text wrapping */
    }
    .search-option-item:hover {
        color: #E0E0E0;
    }
    .search-option-item.selected {
        color: #E0E0E0;
        font-weight: bold;
    }
    .underline-indicator {
        position: absolute;
        bottom: -8px;
        left: 0;
        height: 3px;
        background-color: #FFD700;
        transition: width 0.3s ease, transform 0.3s ease;
        border-radius: 2px;
    }

    #searchResultsSuggestions {
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        background-color: #2C2C2E;
        border-radius: 0.5rem;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
        z-index: 10;
        max-height: 200px;
        overflow-y: auto;
        margin-top: 0.5rem;
        display: none;
        padding: 0.5rem 0;
    }

    #searchResultsSuggestions.active {
        display: block;
    }

    #searchResultsSuggestions .suggestion-item {
        padding: 0.75rem 1rem;
        color: #E0E0E0;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    #searchResultsSuggestions .suggestion-item:hover {
        background-color: #3A3A3C;
    }

    #searchResultsSuggestions .suggestion-item i {
        color: #8E8E93;
    }
  </style>
 </head>
 <body class="bg-[#18181B] text-white min-h-screen flex flex-col">
  <header class="flex justify-between items-center p-4">
    <a href="/" class="text-white font-extrabold text-3xl tracking-tight">Synapic</a>
    <div class="flex space-x-6">
        <button aria-label="Grid view" class="text-white text-xl" id="gridViewButton">
            <i class="fas fa-th-large"></i>
        </button>
        <button aria-label="Menu" class="text-white text-xl" id="menuButton">
            <i class="fas fa-bars"></i>
        </button>
        <button class="text-[#8E8E93] text-sm" type="button" id="searchOptionsButton">
            <i class="fas fa-cog text-[14px]"></i>
            <span>Settings</span>
        </button>
    </div>
  </header>

  <main class="flex-grow flex flex-col items-center px-4 py-8">
    <div class="search-bar-container">
        <form aria-label="Search form" class="w-full" role="search" action="/search" method="GET" id="mainSearchForm">
            <label class="sr-only" for="search-results">
                Search
            </label>
            <div class="search-input-wrapper">
                <input class="search-input"
                       id="search-results" name="query" placeholder="Let's get it ..."
                       type="search" value="<%= query %>"/>
                <button type="button" id="clearSearchButton" class="clear-search-button hidden">
                    <i class="fas fa-times"></i>
                </button>
                <div class="search-separator"></div>
                <button aria-label="Search" class="search-submit-button" type="submit">
                    <i class="fas fa-search"></i>
                </button>
            </div>
            <input type="hidden" name="lang" id="mainSearchLang" value="<%= lang %>">
        </form>

        <div id="searchResultsSuggestions" class="hidden"></div>

        <div id="searchHistoryContainer" class="absolute top-full left-0 w-full bg-[#2C2C2E] rounded-2xl shadow-lg z-10 mt-2 hidden">
            <div class="p-4">
                <h3 class="text-sm font-bold text-[#8E8E93] mb-2">Recent Searches</h3>
                <div id="recentSearchesList" class="space-y-2">
                </div>
            </div>
        </div>
    </div>

    <div class="search-options-bar" id="searchOptionsBar">
        <a href="/search?query=<%= encodeURIComponent(query) %>&type=web&lang=<%= lang %>" class="search-option-item <%= type === 'web' ? 'selected' : '' %>" data-type="web">Web</a>
        <a href="/search?query=<%= encodeURIComponent(query) %>&type=image&lang=<%= lang %>" class="search-option-item <%= type === 'image' ? 'selected' : '' %>" data-type="image">Görseller</a>
        <a href="/search?query=<%= encodeURIComponent(query) %>&type=video&lang=<%= lang %>" class="search-option-item <%= type === 'video' ? 'selected' : '' %>" data-type="video">Videolar</a>
        <a href="/search?query=<%= encodeURIComponent(query) %>&type=news&lang=<%= lang %>" class="search-option-item <%= type === 'news' ? 'selected' : '' %>" data-type="news">Haberler</a>
        <a href="/search?query=<%= encodeURIComponent(query) %>&type=wiki&lang=<%= lang %>" class="search-option-item <%= type === 'wiki' ? 'selected' : '' %>" data-type="wiki">Wikipedia</a>
        <div class="underline-indicator" id="underlineIndicator"></div>
    </div>

    <% if (errorMessage) { %>
        <div class="bg-red-800 text-white p-4 rounded-lg w-full max-w-[700px] mb-6">
            <p>Error: <%= errorMessage %></p>
            <p>Please try again later or use a different search query.</p>
        </div>
    <% } %>

    <% if (type === 'web' && results.length > 0) { %>
        <div class="w-full max-w-[700px] space-y-6">
            <% results.forEach(result => { %>
                <div class="bg-[#2C2C2E] p-4 rounded-lg shadow-lg search-result-item">
                    <a href="<%= result.link %>" target="_blank" rel="noopener noreferrer" class="text-[#8E8E93] text-sm block mb-1 result-link flex items-center">
                        <%
                            let domain = '';
                            try {
                                const urlObj = new URL(result.link);
                                domain = urlObj.hostname;
                            } catch (e) {
                                domain = result.displayUrl;
                            }
                            const faviconUrl = `https://www.google.com/s2/favicons?domain=${encodeURIComponent(domain)}&sz=16`;
                        %>
                        <img src="<%= faviconUrl %>" class="inline-block w-4 h-4 mr-1 -mt-0.5" alt="Site icon" onerror="this.onerror=null;this.src='data:image/svg+xml,%3Csvg xmlns=\'http://www.w3.org/2000/svg\' fill=\'currentColor\' viewBox=\'0 0 20 20\'%3E%3Cpath fill-rule=\'evenodd\' d=\'M10 18a8 8 0 100-16 8 8 0 000 16zM5 9a1 1 0 011-1h8a1 1 0 110 2H6a1 1 0 01-1-1z\' clip-rule=\'evenodd\'%3E%3C/path%3E%3C/svg%3E'; this.classList.add('text-[#8E8E93]'); this.classList.remove('w-4', 'h-4'); this.style.width='16px'; this.style.height='16px';">
                        <%= result.displayUrl %>
                    </a>
                    <h2 class="text-xl font-bold text-white mb-2">
                        <a href="<%= result.link %>" target="_blank" rel="noopener noreferrer" class="hover:underline">
                            <%= result.title %>
                        </a>
                    </h2>
                    <p class="text-[#E0E0E0] text-sm leading-relaxed"><%= result.snippet %></p>
                </div>
            <% }); %>
        </div>
    <% } else if (type === 'image' && images.length > 0) { %>
        <div class="w-full max-w-[700px]">
            <h2 class="text-xl font-bold text-white mb-4">Image Results</h2>
            <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4">
                <% images.forEach(image => { %>
                    <div class="bg-[#2C2C2E] rounded-lg overflow-hidden shadow-lg flex flex-col search-result-item">
                        <a href="<%= image.link %>" target="_blank" rel="noopener noreferrer" class="block h-32 w-full overflow-hidden">
                            <img src="<%= image.thumbnail || image.image %>" alt="<%= image.title %>" class="w-full h-full object-cover transform hover:scale-105 transition-transform duration-200">
                        </a>
                        <div class="p-2 text-xs text-[#E0E0E0] truncate">
                            <%= image.title %>
                        </div>
                    </div>
                <% }); %>
            </div>
        </div>
    <% } else if (type === 'video' && videos.length > 0) { %>
        <div class="w-full max-w-[700px]">
            <h2 class="text-xl font-bold text-white mb-4">Video Results</h2>
            <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                <% videos.forEach(video => { %>
                    <div class="bg-[#2C2C2E] rounded-lg overflow-hidden shadow-lg search-result-item">
                        <a href="<%= video.url %>" target="_blank" rel="noopener noreferrer" class="block">
                            <img src="<%= video.thumbnail %>" alt="<%= video.title %>" class="w-full h-40 object-cover">
                        </a>
                        <div class="p-3">
                            <h3 class="text-lg font-semibold text-white mb-1">
                                <a href="<%= video.url %>" target="_blank" rel="noopener noreferrer" class="hover:underline">
                                    <%= video.title %>
                                </a>
                            </h3>
                            <p class="text-[#8E8E93] text-sm"><%= video.source %></p>
                        </div>
                    </div>
                <% }); %>
            </div>
        </div>
    <% } else if (type === 'news' && newsResults.length > 0) { %>
        <div class="w-full max-w-[700px]">
            <h2 class="text-xl font-bold text-white mb-4">News Results</h2>
            <div class="space-y-6">
                <% newsResults.forEach(news => { %>
                    <div class="bg-[#2C2C2E] p-4 rounded-lg shadow-lg flex flex-col sm:flex-row items-start space-y-3 sm:space-y-0 sm:space-x-4 search-result-item">
                        <% if (news.image) { %>
                            <img src="<%= news.image %>" alt="<%= news.title %>" class="w-full sm:w-32 h-24 object-cover rounded-md flex-shrink-0">
                        <% } %>
                        <div class="flex-grow">
                            <h3 class="text-lg font-semibold text-white mb-1">
                                <a href="<%= news.link %>" target="_blank" rel="noopener noreferrer" class="hover:underline">
                                    <%= news.title %>
                                </a>
                            </h3>
                            <p class="text-[#E0E0E0] text-sm mb-2"><%= news.snippet %></p>
                            <div class="text-[#8E8E93] text-xs">
                                <span><%= news.source %></span>
                                <% if (news.date) { %>
                                    <span class="ml-2">| <%= new Date(news.date).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' }) %></span>
                                <% } %>
                            </div>
                        </div>
                    </div>
                <% }); %>
            </div>
        </div>
    <% } else if (type === 'wiki' && wiki) { %>
        <div class="bg-[#2C2C2E] p-4 rounded-lg shadow-lg w-full max-w-[700px] mb-6 search-result-item">
            <h2 class="text-xl font-bold text-white mb-2">Wikipedia: <%= wiki.title %></h2>
            <% if (wiki.img) { %>
                <img src="<%= wiki.img %>" alt="<%= wiki.title %>" class="float-right ml-4 mb-2 w-32 h-auto rounded-lg object-cover">
            <% } %>
            <p class="text-[#E0E0E0] text-sm leading-relaxed mb-3"><%= wiki.summary %></p>
            <a href="<%= wiki.url %>" target="_blank" rel="noopener noreferrer" class="text-[#8E8E93] hover:underline text-xs">
                Read more on Wikipedia <i class="fas fa-external-link-alt ml-1"></i>
            </a>
            <div class="clear-both"></div>
        </div>
    <% } else { %>
        <div class="text-[#8E8E93] text-lg mt-8">
            <p>Sorry, no results found for your search.</p>
            <p class="text-sm mt-2">Try a different search query or type.</p>
        </div>
    <% } %>

    <% if (type === 'web' || type === 'news') { %>
        <div class="flex justify-between w-full max-w-[700px] mt-8">
            <% if (start > 0) { %>
                <a href="/search?query=<%= encodeURIComponent(query) %>&type=<%= type %>&start=<%= Math.max(0, start - 10) %>&lang=<%= lang %>" class="px-4 py-2 bg-[#2C2C2E] text-white rounded-full hover:bg-[#3A3A3C] transition-colors duration-200">
                    <i class="fas fa-arrow-left mr-2"></i>Previous
                </a>
            <% } else { %>
                <span class="px-4 py-2 bg-[#2C2C2E] text-[#5A5A5F] rounded-full cursor-not-allowed"><i class="fas fa-arrow-left mr-2"></i>Previous</span>
            <% } %>

            <% if ((type === 'web' && results.length === 10) || (type === 'news' && newsResults.length === 10)) { %>
                <a href="/search?query=<%= encodeURIComponent(query) %>&type=<%= type %>&start=<%= start + 10 %>&lang=<%= lang %>" class="px-4 py-2 bg-[#2C2C2E] text-white rounded-full hover:bg-[#3A3A3C] transition-colors duration-200">
                    Next<i class="fas fa-arrow-right ml-2"></i>
                </a>
            <% } else { %>
                <span class="px-4 py-2 bg-[#2C2C2E] text-[#5A5A5F] rounded-full cursor-not-allowed">Next<i class="fas fa-arrow-right ml-2"></i></span>
            <% } %>
        </div>
    <% } %>
  </main>

  <footer class="flex flex-wrap justify-center gap-4 px-4 py-3 text-xs text-[#8E8E93] border-t border-[#3A3A3C] mt-auto">
   <span class="flex items-center space-x-1">
    <a class="hover:underline" href="/privacy">Privacy & Terms</a>
   </span>
   <span class="ml-auto text-[#5A5A5F] select-none">
    © Aperture Labs.
   </span>
  </footer>

  <div id="controlCenterOverlay" class="overlay slide-from-right-overlay">
    <button class="overlay-close" id="closeControlCenterButton" aria-label="Close">
        <i class="fas fa-times"></i>
    </button>
    <div class="overlay-content">
        <h2 class="text-2xl font-bold mb-6 text-white">Control Center</h2>
        <a href="/privacy" class="menu-item">
            <i class="fa-solid fa-lock"></i>
            <span>Privacy & Terms</span>
        </a>
        <a href="/past" class="menu-item">
            <i class="fa-solid fa-clock-rotate-left"></i>
            <span>History</span>
        </a>
    </div>
  </div>

  <div id="searchOptionsOverlay" class="overlay slide-from-right-overlay">
    <button class="overlay-close" id="closeSearchOptionsButton" aria-label="Close">
        <i class="fas fa-times"></i>
    </button>
    <div class="overlay-content">
        <h2 class="text-2xl font-bold mb-6 text-white">Search Options</h2>
        <div class="space-y-4 text-xl">
            <div class="flex items-center justify-between menu-item">
                <label for="locationBased" class="text-white">Location-Based Results</label>
                <label class="toggle-switch">
                    <input type="checkbox" id="locationBased">
                    <span class="slider"></span>
                </label>
            </div>
            <div class="flex items-center justify-between menu-item">
                <label for="languageSelect" class="text-white">Language:</label>
                <select id="languageSelect" class="bg-[#2C2C2E] text-white p-2 rounded">
                    <option value="tr">Turkish</option>
                    <option value="en">English</option>
                    <option value="de">Deutsch</option>
                </select>
            </div>
            <button class="mt-6 px-6 py-3 bg-[#5A5A5F] text-white rounded-full hover:bg-[#6A6A6F] transition-colors duration-200" id="saveSearchOptions">
                Save Settings
            </button>
        </div>
    </div>
  </div>

  <div id="gridViewOverlay" class="overlay">
    <button class="overlay-close" id="closeGridViewButton" aria-label="Close">
        <i class="fas fa-times"></i>
    </button>
    <div class="modal-content">
        <h2 class="text-3xl font-bold mb-6 text-white">Quick Search</h2>
        <form aria-label="Quick search form" class="w-full mb-6" action="/search" method="GET">
            <div class="relative mb-4">
                <input class="w-full rounded-full bg-[#18181B] text-[#8E8E93] placeholder-[#8E8E93] py-3 pl-6 pr-12 text-sm focus:outline-none focus:ring-1 focus:ring-[#5A5A5F] focus:bg-[#3A3A3C]"
                       id="quickSearchInput" name="query" placeholder="Search..." type="search"/>
                <button aria-label="Quick Search Submit" class="absolute right-4 top-1/2 -translate-y-1/2 text-[#8E8E93] hover:text-white" type="submit">
                    <i class="fas fa-search"></i>
                </button>
            </div>
            <input type="hidden" id="quickSearchType" name="type" value="web">
            <input type="hidden" name="lang" id="quickSearchLang" value="en">
        </form>
        <nav class="flex flex-col space-y-3 text-xl">
            <a href="#" data-type="web" class="flex items-center space-x-3 p-3 rounded-lg hover:bg-[#3A3A3C] transition-colors duration-200 quick-search-type-link">
                <i class="fas fa-globe text-[#8E8E93]"></i>
                <span class="text-white">Search Web</span>
            </a>
            <a href="#" data-type="image" class="flex items-center space-x-3 p-3 rounded-lg hover:bg-[#3A3A3C] transition-colors duration-200 quick-search-type-link">
                <i class="fas fa-image text-[#8E8E93]"></i>
                <span class="text-white">Search Images</span>
            </a>
            <a href="#" data-type="news" class="flex items-center space-x-3 p-3 rounded-lg hover:bg-[#3A3A3C] transition-colors duration-200 quick-search-type-link">
                <i class="fas fa-newspaper text-[#8E8E93]"></i>
                <span class="text-white">Search News</span>
            </a>
            <a href="#" data-type="wiki" class="flex items-center space-x-3 p-3 rounded-lg hover:bg-[#3A3A3C] transition-colors duration-200 quick-search-type-link">
                <i class="fab fa-wikipedia-w text-[#8E8E93]"></i>
                <span class="text-white">Search Wikipedia</span>
            </a>
            <a href="#" data-type="video" class="flex items-center space-x-3 p-3 rounded-lg hover:bg-[#3A3A3C] transition-colors duration-200 quick-search-type-link">
                <i class="fas fa-video text-[#8E8E93]"></i>
                <span class="text-white">Search Videos</span>
            </a>
        </nav>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
        const menuButton = document.getElementById('menuButton');
        const controlCenterOverlay = document.getElementById('controlCenterOverlay');
        const closeControlCenterButton = document.getElementById('closeControlCenterButton');

        const searchOptionsButton = document.getElementById('searchOptionsButton');
        const searchOptionsOverlay = document.getElementById('searchOptionsOverlay');
        const closeSearchOptionsButton = document.getElementById('closeSearchOptionsButton');
        const languageSelect = document.getElementById('languageSelect');
        const saveSearchOptionsButton = document.getElementById('saveSearchOptions');
        const locationBasedToggle = document.getElementById('locationBased');

        const gridViewButton = document.getElementById('gridViewButton');
        const gridViewOverlay = document.getElementById('gridViewOverlay');
        const closeGridViewButton = document.getElementById('closeGridViewButton');
        const quickSearchInput = document.getElementById('quickSearchInput');
        const quickSearchType = document.getElementById('quickSearchType');
        const quickSearchLang = document.getElementById('quickSearchLang');
        const quickSearchTypeLinks = document.querySelectorAll('.quick-search-type-link');

        const mainSearchForm = document.getElementById('mainSearchForm');
        const mainSearchLang = document.getElementById('mainSearchLang');
        const mainSearchInput = document.getElementById('search-results');
        const clearSearchButton = document.getElementById('clearSearchButton');

        const searchHistoryContainer = document.getElementById('searchHistoryContainer');
        const recentSearchesList = document.getElementById('recentSearchesList');

        const searchResultsSuggestionsDiv = document.getElementById('searchResultsSuggestions');
        const searchSuggestionsData = [
            "test sonucu",
            "test nedir",
            "test çöz",
            "test sürüşü",
            "test mühendisliği",
            "test kitabı",
            "test teknikleri",
            "test uygulamaları",
            "test etmek",
            "test etmek ne demek",
            "yapay zeka",
            "uzay araştırmaları",
            "programlama dilleri",
            "tarihi olaylar",
            "son dakika haberleri",
            "wikipedia ne demek",
            "wikipedia nasıl kullanılır"
        ];

        const searchOptionsBar = document.getElementById('searchOptionsBar');
        const underlineIndicator = document.getElementById('underlineIndicator');
        const searchOptionItems = document.querySelectorAll('.search-option-item');

        function toggleOverlay(overlayElement, show) {
            const content = overlayElement.querySelector('.overlay-content, .modal-content');

            if (show) {
                if (content) {
                    content.style.transform = '';
                    content.style.opacity = '';
                }
                overlayElement.classList.add('is-active');
            } else {
                if (overlayElement.classList.contains('slide-from-right-overlay')) {
                    content.style.transform = 'translateX(100%)';
                    content.addEventListener('transitionend', function handler() {
                        overlayElement.classList.remove('is-active');
                        content.style.transform = '';
                        content.removeEventListener('transitionend', handler);
                    }, { once: true });
                } else if (content) {
                    content.style.opacity = '0';
                    content.style.transform = 'translateY(-20px)';
                    content.addEventListener('transitionend', function handler() {
                        overlayElement.classList.remove('is-active');
                        content.style.opacity = '';
                        content.style.transform = '';
                        content.removeEventListener('transitionend', handler);
                    }, { once: true });
                } else {
                    overlayElement.classList.remove('is-active');
                }
            }
        }

        const updateUnderlineIndicator = () => {
            const selectedItem = document.querySelector('.search-option-item.selected');
            if (selectedItem) {
                underlineIndicator.style.width = `${selectedItem.offsetWidth}px`;
                underlineIndicator.style.transform = `translateX(${selectedItem.offsetLeft}px)`;
            }
        };

        searchOptionItems.forEach(item => {
            item.addEventListener('click', () => {
                searchOptionItems.forEach(i => i.classList.remove('selected'));
                item.classList.add('selected');
                updateUnderlineIndicator();
            });
        });

        const loadLanguageSetting = () => {
            const savedLang = localStorage.getItem('synapicSearchLang') || 'en';
            languageSelect.value = savedLang;
            mainSearchLang.value = savedLang;
            quickSearchLang.value = savedLang;
        };

        const loadLocationBasedSetting = () => {
            const savedLocationBased = localStorage.getItem('synapicLocationBased') === 'true';
            locationBasedToggle.checked = savedLocationBased;
        };

        saveSearchOptionsButton.addEventListener('click', () => {
            const selectedLang = languageSelect.value;
            localStorage.setItem('synapicSearchLang', selectedLang);

            const isLocationBased = locationBasedToggle.checked;
            localStorage.setItem('synapicLocationBased', isLocationBased);

            loadLanguageSetting();
            loadLocationBasedSetting();
            toggleOverlay(searchOptionsOverlay, false);
        });

        menuButton.addEventListener('click', () => {
            toggleOverlay(controlCenterOverlay, true);
        });
        closeControlCenterButton.addEventListener('click', () => {
            toggleOverlay(controlCenterOverlay, false);
        });
        controlCenterOverlay.addEventListener('click', (event) => {
            if (event.target === controlCenterOverlay) {
                toggleOverlay(controlCenterOverlay, false);
            }
        });

        if (searchOptionsButton) {
            searchOptionsButton.addEventListener('click', () => {
                toggleOverlay(searchOptionsOverlay, true);
            });
            closeSearchOptionsButton.addEventListener('click', () => {
                toggleOverlay(searchOptionsOverlay, false);
            });
            searchOptionsOverlay.addEventListener('click', (event) => {
                if (event.target === searchOptionsOverlay) {
                    toggleOverlay(searchOptionsOverlay, false);
                }
            });
        } else {
            console.warn("searchOptionsButton not found. Settings button may be non-functional.");
        }

        gridViewButton.addEventListener('click', () => {
            toggleOverlay(gridViewOverlay, true);
            const currentMainQuery = mainSearchInput.value || '';
            quickSearchInput.value = currentMainQuery;
            quickSearchInput.focus();
            updateQuickSearchInputPlaceholder('web');
        });
        closeGridViewButton.addEventListener('click', () => {
            toggleOverlay(gridViewOverlay, false);
        });
        gridViewOverlay.addEventListener('click', (event) => {
            if (event.target === gridViewOverlay) {
                toggleOverlay(gridViewOverlay, false);
            }
        });

        const updateQuickSearchInputPlaceholder = (type) => {
            let placeholderText = "Search...";
            switch(type) {
                case 'web': placeholderText = "Search the web..."; break;
                case 'image': placeholderText = "Search images..."; break;
                case 'news': placeholderText = "Search news..."; break;
                case 'wiki': placeholderText = "Search Wikipedia..."; break;
                case 'video': placeholderText = "Search videos..."; break;
            }
            quickSearchInput.placeholder = placeholderText;
        };

        quickSearchTypeLinks.forEach(link => {
            link.addEventListener('click', (event) => {
                event.preventDefault();
                const type = link.dataset.type;
                quickSearchType.value = type;
                updateQuickSearchInputPlaceholder(type);
                quickSearchInput.focus();
            });
        });

        function getDeviceId() {
            let deviceId = localStorage.getItem('synapicDeviceId');
            if (!deviceId) {
                const randomDigits = Math.floor(100000 + Math.random() * 900000);
                deviceId = `apm_${randomDigits}`;
                localStorage.setItem('synapicDeviceId', deviceId);
            }
            return deviceId;
        }

        const saveSearchToHistory = async () => {
            const query = mainSearchInput.value;
            const type = document.querySelector('.search-option-item.selected')?.dataset.type || "web";
            const lang = mainSearchLang.value;
            const deviceId = getDeviceId();

            if (query && query.trim() !== '') {
                const title = `${query}`;
                const url = `/search?query=${encodeURIComponent(query)}&type=${encodeURIComponent(type)}&lang=${encodeURIComponent(lang)}`;

                try {
                    const response = await fetch('/api/save-history', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ title, url, deviceId }),
                        keepalive: true
                    });
                    if (!response.ok) {
                        const errorText = await response.text();
                        console.error('History save API error:', response.status, errorText);
                    } else {
                        console.log('History save request successfully sent.');
                    }
                } catch (error) {
                    console.error('Network error during history save:', error);
                }
            }
        };

        mainSearchForm.addEventListener('submit', saveSearchToHistory);

        const toggleClearButton = () => {
            if (mainSearchInput.value.length > 0) {
                clearSearchButton.classList.remove('hidden');
            } else {
                clearSearchButton.classList.add('hidden');
            }
        };

        mainSearchInput.addEventListener('input', toggleClearButton);
        clearSearchButton.addEventListener('click', () => {
            mainSearchInput.value = '';
            toggleClearButton();
            searchHistoryContainer.classList.add('hidden');
            searchResultsSuggestionsDiv.classList.remove('active');
            mainSearchInput.focus();
        });

        const fetchRecentSearches = async () => {
            const deviceId = getDeviceId();
            try {
                const response = await fetch('/api/history', {
                    headers: {
                        'X-Device-ID': deviceId
                    }
                });
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const history = await response.json();
                renderRecentSearches(history);
            } catch (error) {
                console.error("Error fetching recent searches:", error);
                searchHistoryContainer.classList.add('hidden');
            }
        };

        const renderRecentSearches = (history) => {
            recentSearchesList.innerHTML = '';
            if (history.length === 0) {
                searchHistoryContainer.classList.add('hidden');
                return;
            }

            if (!searchResultsSuggestionsDiv.classList.contains('active')) {
                searchHistoryContainer.classList.remove('hidden');
            }

            history.slice(0, 5).forEach(item => {
                const displayQueryMatch = item.title.match(/Search: (.*?) \((.*?)\ssearch\)/);
                const displayQuery = displayQueryMatch ? displayQueryMatch[1] : item.title;

                const historyItemHtml = `
                    <a href="#" data-query="${displayQuery}" class="search-history-item text-[#E0E0E0] text-sm">
                        <i class="fas fa-history"></i> <span>${displayQuery}</span>
                    </a>
                `;
                recentSearchesList.innerHTML += historyItemHtml;
            });
        };

        mainSearchInput.addEventListener('input', () => {
            const query = mainSearchInput.value.toLowerCase();
            searchResultsSuggestionsDiv.innerHTML = '';

            if (query.length > 0) {
                searchHistoryContainer.classList.add('hidden');

                const filteredSuggestions = searchSuggestionsData.filter(suggestion =>
                    suggestion.toLowerCase().includes(query)
                );

                if (filteredSuggestions.length > 0) {
                    filteredSuggestions.forEach(suggestion => {
                        const suggestionDiv = document.createElement('div');
                        suggestionDiv.classList.add('suggestion-item');
                        suggestionDiv.innerHTML = `<i class="fas fa-search"></i><span>${suggestion}</span>`;
                        suggestionDiv.addEventListener('click', (event) => {
                            event.preventDefault();
                            mainSearchInput.value = suggestion;
                            searchResultsSuggestionsDiv.classList.remove('active');
                            mainSearchForm.submit();
                        });
                        searchResultsSuggestionsDiv.appendChild(suggestionDiv);
                    });
                    searchResultsSuggestionsDiv.classList.add('active');
                } else {
                    searchResultsSuggestionsDiv.classList.remove('active');
                }
            } else {
                searchResultsSuggestionsDiv.classList.remove('active');
                fetchRecentSearches();
            }
        });

        mainSearchInput.addEventListener('focus', () => {
            if (mainSearchInput.value.length > 0) {
                mainSearchInput.dispatchEvent(new Event('input'));
            } else {
                fetchRecentSearches();
            }
        });

        mainSearchInput.addEventListener('blur', () => {
            setTimeout(() => {
                if (!searchResultsSuggestionsDiv.contains(document.activeElement)) {
                    searchResultsSuggestionsDiv.classList.remove('active');
                }
                if (!searchHistoryContainer.contains(document.activeElement)) {
                    searchHistoryContainer.classList.add('hidden');
                }
            }, 100);
        });

        document.addEventListener('click', (event) => {
            const searchBarAndSuggestionsArea = mainSearchInput.closest('.search-bar-container');
            if (searchBarAndSuggestionsArea && !searchBarAndSuggestionsArea.contains(event.target)) {
                searchResultsSuggestionsDiv.classList.remove('active');
                searchHistoryContainer.classList.add('hidden');
            }
        });

        recentSearchesList.addEventListener('click', (event) => {
            const clickedLink = event.target.closest('.search-history-item');
            if (clickedLink) {
                event.preventDefault();
                mainSearchInput.value = clickedLink.dataset.query;
                mainSearchForm.submit();
                searchHistoryContainer.classList.add('hidden');
            }
        });

        loadLanguageSetting();
        loadLocationBasedSetting();
        toggleClearButton();
        updateUnderlineIndicator();
    });
  </script>
 </body>
</html>