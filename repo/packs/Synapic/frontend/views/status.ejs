<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Synapic Status Page</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #1a1a1a;
            color: #e0e0e0;
            display: flex;
            flex-direction: column;
            align-items: center;
            min-height: 100vh;
            padding: 2rem;
        }
        .container {
            width: 100%;
            max-width: 900px;
            background-color: #2c2c2e;
            border-radius: 1rem;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
            padding: 2rem;
            margin-top: 2rem;
        }
        .header {
            text-align: center;
            margin-bottom: 2rem;
        }
        .header h1 {
            font-size: 2.5rem;
            font-weight: 700;
            color: #ffffff;
            margin-bottom: 0.5rem;
        }
        .header .status-icon {
            font-size: 3rem;
            color: #28a745;
            margin-bottom: 1rem;
        }
        .header p {
            font-size: 0.9rem;
            color: #8e8e93;
        }
        .service-card {
            background-color: #1c1c1e;
            border-radius: 0.75rem;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            border: 1px solid #3a3a3c;
        }
        .service-card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }
        .service-card-header h2 {
            font-size: 1.25rem;
            font-weight: 600;
            color: #ffffff;
        }
        .service-status {
            display: flex;
            align-items: center;
            font-weight: 500;
        }
        .service-status .status-dot {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            margin-right: 0.5rem;
            background-color: #28a745;
        }
        .service-status.down .status-dot {
            background-color: #dc3545;
        }
        .service-status.degraded .status-dot {
            background-color: #ffc107;
        }
        .availability-bar-container {
            background-color: #3a3a3c;
            border-radius: 0.25rem;
            height: 8px;
            margin-top: 0.75rem;
            overflow: hidden;
        }
        .availability-bar {
            height: 100%;
            background-color: #28a745;
            width: 100%;
            transition: width 0.5s ease-in-out;
        }
        .availability-text {
            font-size: 0.85rem;
            color: #e0e0e0;
            margin-top: 0.5rem;
            text-align: right;
        }
        .graph-container {
            display: flex;
            align-items: flex-end;
            height: 80px;
            background-color: #3a3a3c;
            border-radius: 0.5rem;
            padding: 0.5rem;
            margin-top: 1rem;
            overflow: hidden;
            position: relative;
            overflow-x: auto; 
        }
        .graph-line {
            width: 8px; 
            background-color: #007aff;
            margin: 0 2px; 
            transition: height 0.3s ease-out;
            min-width: 1px;
            position: relative;
            flex-shrink: 0; 
        }
        .graph-line:hover {
            background-color: #4CAF50;
            cursor: pointer;
        }
        .graph-tooltip {
            position: absolute;
            background-color: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 0.25rem 0.5rem;
            border-radius: 0.25rem;
            font-size: 0.75rem;
            white-space: nowrap;
            z-index: 10;
            pointer-events: none;
            opacity: 0;
            transition: opacity 0.2s ease-in-out;
            transform: translateX(-50%);
            bottom: calc(100% + 5px);
            left: 50%;
        }
        .graph-line:hover .graph-tooltip {
            opacity: 1;
        }
        .graph-label {
            position: absolute;
            bottom: 0.2rem;
            left: 0.5rem;
            font-size: 0.7rem;
            color: #8e8e93;
        }
        .graph-label.right {
            left: auto;
            right: 0.5rem;
        }
        .graph-label.middle {
            left: 50%;
            transform: translateX(-50%);
        }
        .response-times {
            display: flex;
            justify-content: space-between;
            font-size: 0.75rem;
            color: #8e8e93;
            margin-top: 0.5rem;
            padding: 0 0.5rem;
        }
        .response-times span {
            font-weight: 500;
        }
    </style>
</head>
<body>
    <div class="header">
        <i class="fas fa-check-circle status-icon" id="overall-icon"></i>
        <h1 id="overall-status-text">All Systems Operational</h1>
        <p>Last updated: <span id="last-updated">Loading...</span></p>
    </div>

    <div class="container">
        <div class="service-card">
            <div class="service-card-header">
                <h2>Synapic Web Server</h2>
                <div class="service-status" id="synapic-status-indicator">
                    <span class="status-dot"></span>
                    <span class="status-text">Operational</span>
                </div>
            </div>
            <div class="availability-bar-container">
                <div class="availability-bar" id="synapic-availability-bar"></div>
            </div>
            <div class="availability-text" id="synapic-availability-text"></div>
            <div class="response-times" id="synapic-response-times-display">
                <span>Min: <span class="time-value">0.00 s</span></span>
                <span>Avg: <span class="time-value">0.00 s</span></span>
                <span>Max: <span class="time-value">0.00 s</span></span>
            </div>
            <div class="graph-container" id="synapic-graph">
                </div>
        </div>

        <div class="service-card">
            <div class="service-card-header">
                <h2>Search API Service</h2>
                <div class="service-status" id="api-status-indicator">
                    <span class="status-dot"></span>
                    <span class="status-text">Operational</span>
                </div>
            </div>
            <div class="availability-bar-container">
                <div class="availability-bar" id="api-availability-bar"></div>
            </div>
            <div class="availability-text" id="api-availability-text"></div>
            <div class="response-times" id="api-response-times-display">
                <span>Min: <span class="time-value">0.00 s</span></span>
                <span>Avg: <span class="time-value">0.00 s</span></span>
                <span>Max: <span class="time-value">0.00 s</span></span>
            </div>
            <div class="graph-container" id="api-graph">
                </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const overallStatusText = document.getElementById('overall-status-text');
            const overallIcon = document.getElementById('overall-icon');
            const lastUpdatedSpan = document.getElementById('last-updated');

            const synapicStatusIndicator = document.getElementById('synapic-status-indicator');
            const synapicAvailabilityBar = document.getElementById('synapic-availability-bar');
            const synapicAvailabilityText = document.getElementById('synapic-availability-text');
            const synapicGraphContainer = document.getElementById('synapic-graph');
            const synapicResponseTimesDisplay = document.getElementById('synapic-response-times-display');

            const apiStatusIndicator = document.getElementById('api-status-indicator');
            const apiAvailabilityBar = document.getElementById('api-availability-bar');
            const apiAvailabilityText = document.getElementById('api-availability-text');
            const apiGraphContainer = document.getElementById('api-graph');
            const apiResponseTimesDisplay = document.getElementById('api-response-times-display');

            async function pingService(url) {
                const startTime = performance.now();
                try {
                    const response = await fetch(url, { mode: 'no-cors', cache: 'no-store' }); 
                    const endTime = performance.now();
                    const responseTime = (endTime - startTime) / 1000; 
                    return { success: true, responseTime: responseTime };
                } catch (error) {
                    const endTime = performance.now();
                    const responseTime = (endTime - startTime) / 1000;
                    console.error(`Ping to ${url} failed:`, error);
                    return { success: false, responseTime: responseTime };
                }
            }

            async function fetchServiceData(serviceName) {
                let url = '';
                if (serviceName === 'synapic') {
                    url = 'http://localhost:8000/'; 
                } else if (serviceName === 'api') {
                    url = 'http://localhost:8000/api/search?apikey=synapic&query=test'; 
                }

                const numPings = 50; 
                let successfulPings = 0;
                const responseTimes = [];

                for (let i = 0; i < numPings; i++) {
                    const result = await pingService(url);
                    if (result.success) {
                        successfulPings++;
                    }
                    responseTimes.push(result.responseTime);
                }

                const availability = (successfulPings / numPings) * 100;

                let statusText = 'Operational';
                let statusClass = '';

                if (availability < 90) {
                    statusText = 'Down';
                    statusClass = 'down';
                } else if (availability < 99.9) {
                    statusText = 'Degraded Performance';
                    statusClass = 'degraded';
                }

                const minTime = Math.min(...responseTimes).toFixed(2);
                const maxTime = Math.max(...responseTimes).toFixed(2);
                const avgTime = (responseTimes.reduce((sum, time) => sum + time, 0) / responseTimes.length).toFixed(2);

                return {
                    name: serviceName,
                    status: statusText,
                    statusClass: statusClass,
                    availability: availability,
                    responseTimes: responseTimes, 
                    minResponseTime: parseFloat(minTime),
                    avgResponseTime: parseFloat(avgTime),
                    maxResponseTime: parseFloat(maxTime)
                };
            }

            function renderGraph(container, data) {
                container.innerHTML = ''; 
                const maxTime = Math.max(...data, 1.8); 
                
                data.forEach(time => {
                    const line = document.createElement('div');
                    line.classList.add('graph-line');
                    line.style.height = `${(time / maxTime) * 100}%`; 
                    line.dataset.responseTime = time.toFixed(2);

                    const tooltip = document.createElement('div');
                    tooltip.classList.add('graph-tooltip');
                    tooltip.textContent = `${time.toFixed(2)} s`;
                    line.appendChild(tooltip);

                    container.appendChild(line);
                });
            }

            function updateServiceDisplay(statusIndicatorDiv, availabilityBar, availabilityText, graphContainer, responseTimesDisplay, data) {
                statusIndicatorDiv.querySelector('.status-text').textContent = data.status;
                statusIndicatorDiv.classList.remove('down', 'degraded'); 
                if (data.statusClass) {
                    statusIndicatorDiv.classList.add(data.statusClass); 
                }
                statusIndicatorDiv.querySelector('.status-dot').style.backgroundColor =
                    data.statusClass === 'down' ? '#dc3545' : 
                    data.statusClass === 'degraded' ? '#ffc107' : 
                    '#28a745'; 

                availabilityBar.style.width = `${data.availability}%`;
                availabilityBar.style.backgroundColor =
                    data.statusClass === 'down' ? '#dc3545' :
                    data.statusClass === 'degraded' ? '#ffc107' :
                    '#28a745';
                availabilityText.textContent = `${data.availability.toFixed(3)}% availability`;

                renderGraph(graphContainer, data.responseTimes);

                responseTimesDisplay.children[0].querySelector('.time-value').textContent = `${data.minResponseTime.toFixed(2)} s`;
                responseTimesDisplay.children[1].querySelector('.time-value').textContent = `${data.avgResponseTime.toFixed(2)} s`;
                responseTimesDisplay.children[2].querySelector('.time-value').textContent = `${data.maxResponseTime.toFixed(2)} s`;
            }

            async function saveStatusData(data) {
                try {
                    const response = await fetch('/api/status', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(data),
                    });

                    if (!response.ok) {
                        const errorData = await response.json();
                        console.error('Failed to save status data to API:', response.status, errorData);
                    } else {
                        console.log('Status data successfully saved to API.');
                    }
                } catch (error) {
                    console.error('Error saving status data to API:', error);
                }
            }

            async function updateStatusPage() {
                const now = new Date();
                lastUpdatedSpan.textContent = `${now.toLocaleDateString('en-US')} ${now.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' })} GMT+3`;

                const synapicData = await fetchServiceData('synapic');
                updateServiceDisplay(synapicStatusIndicator, synapicAvailabilityBar, synapicAvailabilityText, synapicGraphContainer, synapicResponseTimesDisplay, synapicData);

                const apiData = await fetchServiceData('api');
                updateServiceDisplay(apiStatusIndicator, apiAvailabilityBar, apiAvailabilityText, apiGraphContainer, apiResponseTimesDisplay, apiData);

                let overallStatus = 'All Systems Operational';
                let overallIconColor = '#28a745'; 
                let overallIconClass = 'fa-check-circle';

                if (synapicData.status !== 'Operational' || apiData.status !== 'Operational') {
                    overallStatus = 'Some Services Interrupted';
                    overallIconColor = '#ffc107'; 
                    overallIconClass = 'fa-exclamation-triangle';
                }
                
                overallStatusText.textContent = overallStatus;
                overallIcon.style.color = overallIconColor;
                overallIcon.classList.remove('fa-check-circle', 'fa-exclamation-triangle', 'fa-times-circle'); 
                overallIcon.classList.add(overallIconClass); 

                const statusPayload = {
                    timestamp: now.toISOString(),
                    overallStatus: overallStatus,
                    services: [
                        { 
                            name: synapicData.name, 
                            status: synapicData.status, 
                            statusClass: synapicData.statusClass, 
                            availability: synapicData.availability, 
                            minResponseTime: synapicData.minResponseTime, 
                            avgResponseTime: synapicData.avgResponseTime, 
                            maxResponseTime: synapicData.maxResponseTime 
                        },
                        { 
                            name: apiData.name, 
                            status: apiData.status, 
                            statusClass: apiData.statusClass, 
                            availability: apiData.availability, 
                            minResponseTime: apiData.minResponseTime, 
                            avgResponseTime: apiData.avgResponseTime, 
                            maxResponseTime: apiData.maxResponseTime 
                        }
                    ]
                };
                await saveStatusData(statusPayload);
            }

            updateStatusPage();

            setInterval(updateStatusPage, 10000); 
        });
    </script>
</body>
</html>